// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EpisodeAreaCach is an object representing the database table.
type EpisodeAreaCach struct {
	EpisodeID int64     `boil:"episode_id" json:"episode_id" toml:"episode_id" yaml:"episode_id"`
	CN        null.Bool `boil:"cn" json:"cn,omitempty" toml:"cn" yaml:"cn,omitempty"`
	HK        null.Bool `boil:"hk" json:"hk,omitempty" toml:"hk" yaml:"hk,omitempty"`
	TW        null.Bool `boil:"tw" json:"tw,omitempty" toml:"tw" yaml:"tw,omitempty"`
	TH        null.Bool `boil:"th" json:"th,omitempty" toml:"th" yaml:"th,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *episodeAreaCachR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L episodeAreaCachL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EpisodeAreaCachColumns = struct {
	EpisodeID string
	CN        string
	HK        string
	TW        string
	TH        string
	CreatedAt string
	UpdatedAt string
}{
	EpisodeID: "episode_id",
	CN:        "cn",
	HK:        "hk",
	TW:        "tw",
	TH:        "th",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var EpisodeAreaCachTableColumns = struct {
	EpisodeID string
	CN        string
	HK        string
	TW        string
	TH        string
	CreatedAt string
	UpdatedAt string
}{
	EpisodeID: "episode_area_caches.episode_id",
	CN:        "episode_area_caches.cn",
	HK:        "episode_area_caches.hk",
	TW:        "episode_area_caches.tw",
	TH:        "episode_area_caches.th",
	CreatedAt: "episode_area_caches.created_at",
	UpdatedAt: "episode_area_caches.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EpisodeAreaCachWhere = struct {
	EpisodeID whereHelperint64
	CN        whereHelpernull_Bool
	HK        whereHelpernull_Bool
	TW        whereHelpernull_Bool
	TH        whereHelpernull_Bool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	EpisodeID: whereHelperint64{field: "\"episode_area_caches\".\"episode_id\""},
	CN:        whereHelpernull_Bool{field: "\"episode_area_caches\".\"cn\""},
	HK:        whereHelpernull_Bool{field: "\"episode_area_caches\".\"hk\""},
	TW:        whereHelpernull_Bool{field: "\"episode_area_caches\".\"tw\""},
	TH:        whereHelpernull_Bool{field: "\"episode_area_caches\".\"th\""},
	CreatedAt: whereHelpertime_Time{field: "\"episode_area_caches\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"episode_area_caches\".\"updated_at\""},
}

// EpisodeAreaCachRels is where relationship names are stored.
var EpisodeAreaCachRels = struct {
}{}

// episodeAreaCachR is where relationships are stored.
type episodeAreaCachR struct {
}

// NewStruct creates a new relationship struct
func (*episodeAreaCachR) NewStruct() *episodeAreaCachR {
	return &episodeAreaCachR{}
}

// episodeAreaCachL is where Load methods for each relationship are stored.
type episodeAreaCachL struct{}

var (
	episodeAreaCachAllColumns            = []string{"episode_id", "cn", "hk", "tw", "th", "created_at", "updated_at"}
	episodeAreaCachColumnsWithoutDefault = []string{"episode_id", "created_at", "updated_at"}
	episodeAreaCachColumnsWithDefault    = []string{"cn", "hk", "tw", "th"}
	episodeAreaCachPrimaryKeyColumns     = []string{"episode_id"}
	episodeAreaCachGeneratedColumns      = []string{}
)

type (
	// EpisodeAreaCachSlice is an alias for a slice of pointers to EpisodeAreaCach.
	// This should almost always be used instead of []EpisodeAreaCach.
	EpisodeAreaCachSlice []*EpisodeAreaCach
	// EpisodeAreaCachHook is the signature for custom EpisodeAreaCach hook methods
	EpisodeAreaCachHook func(context.Context, boil.ContextExecutor, *EpisodeAreaCach) error

	episodeAreaCachQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	episodeAreaCachType                 = reflect.TypeOf(&EpisodeAreaCach{})
	episodeAreaCachMapping              = queries.MakeStructMapping(episodeAreaCachType)
	episodeAreaCachPrimaryKeyMapping, _ = queries.BindMapping(episodeAreaCachType, episodeAreaCachMapping, episodeAreaCachPrimaryKeyColumns)
	episodeAreaCachInsertCacheMut       sync.RWMutex
	episodeAreaCachInsertCache          = make(map[string]insertCache)
	episodeAreaCachUpdateCacheMut       sync.RWMutex
	episodeAreaCachUpdateCache          = make(map[string]updateCache)
	episodeAreaCachUpsertCacheMut       sync.RWMutex
	episodeAreaCachUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var episodeAreaCachAfterSelectHooks []EpisodeAreaCachHook

var episodeAreaCachBeforeInsertHooks []EpisodeAreaCachHook
var episodeAreaCachAfterInsertHooks []EpisodeAreaCachHook

var episodeAreaCachBeforeUpdateHooks []EpisodeAreaCachHook
var episodeAreaCachAfterUpdateHooks []EpisodeAreaCachHook

var episodeAreaCachBeforeDeleteHooks []EpisodeAreaCachHook
var episodeAreaCachAfterDeleteHooks []EpisodeAreaCachHook

var episodeAreaCachBeforeUpsertHooks []EpisodeAreaCachHook
var episodeAreaCachAfterUpsertHooks []EpisodeAreaCachHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EpisodeAreaCach) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EpisodeAreaCach) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EpisodeAreaCach) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EpisodeAreaCach) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EpisodeAreaCach) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EpisodeAreaCach) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EpisodeAreaCach) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EpisodeAreaCach) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EpisodeAreaCach) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range episodeAreaCachAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEpisodeAreaCachHook registers your hook function for all future operations.
func AddEpisodeAreaCachHook(hookPoint boil.HookPoint, episodeAreaCachHook EpisodeAreaCachHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		episodeAreaCachAfterSelectHooks = append(episodeAreaCachAfterSelectHooks, episodeAreaCachHook)
	case boil.BeforeInsertHook:
		episodeAreaCachBeforeInsertHooks = append(episodeAreaCachBeforeInsertHooks, episodeAreaCachHook)
	case boil.AfterInsertHook:
		episodeAreaCachAfterInsertHooks = append(episodeAreaCachAfterInsertHooks, episodeAreaCachHook)
	case boil.BeforeUpdateHook:
		episodeAreaCachBeforeUpdateHooks = append(episodeAreaCachBeforeUpdateHooks, episodeAreaCachHook)
	case boil.AfterUpdateHook:
		episodeAreaCachAfterUpdateHooks = append(episodeAreaCachAfterUpdateHooks, episodeAreaCachHook)
	case boil.BeforeDeleteHook:
		episodeAreaCachBeforeDeleteHooks = append(episodeAreaCachBeforeDeleteHooks, episodeAreaCachHook)
	case boil.AfterDeleteHook:
		episodeAreaCachAfterDeleteHooks = append(episodeAreaCachAfterDeleteHooks, episodeAreaCachHook)
	case boil.BeforeUpsertHook:
		episodeAreaCachBeforeUpsertHooks = append(episodeAreaCachBeforeUpsertHooks, episodeAreaCachHook)
	case boil.AfterUpsertHook:
		episodeAreaCachAfterUpsertHooks = append(episodeAreaCachAfterUpsertHooks, episodeAreaCachHook)
	}
}

// One returns a single episodeAreaCach record from the query.
func (q episodeAreaCachQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EpisodeAreaCach, error) {
	o := &EpisodeAreaCach{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for episode_area_caches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EpisodeAreaCach records from the query.
func (q episodeAreaCachQuery) All(ctx context.Context, exec boil.ContextExecutor) (EpisodeAreaCachSlice, error) {
	var o []*EpisodeAreaCach

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EpisodeAreaCach slice")
	}

	if len(episodeAreaCachAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EpisodeAreaCach records in the query.
func (q episodeAreaCachQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count episode_area_caches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q episodeAreaCachQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if episode_area_caches exists")
	}

	return count > 0, nil
}

// EpisodeAreaCaches retrieves all the records using an executor.
func EpisodeAreaCaches(mods ...qm.QueryMod) episodeAreaCachQuery {
	mods = append(mods, qm.From("\"episode_area_caches\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"episode_area_caches\".*"})
	}

	return episodeAreaCachQuery{q}
}

// FindEpisodeAreaCach retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEpisodeAreaCach(ctx context.Context, exec boil.ContextExecutor, episodeID int64, selectCols ...string) (*EpisodeAreaCach, error) {
	episodeAreaCachObj := &EpisodeAreaCach{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"episode_area_caches\" where \"episode_id\"=$1", sel,
	)

	q := queries.Raw(query, episodeID)

	err := q.Bind(ctx, exec, episodeAreaCachObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from episode_area_caches")
	}

	if err = episodeAreaCachObj.doAfterSelectHooks(ctx, exec); err != nil {
		return episodeAreaCachObj, err
	}

	return episodeAreaCachObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EpisodeAreaCach) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no episode_area_caches provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(episodeAreaCachColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	episodeAreaCachInsertCacheMut.RLock()
	cache, cached := episodeAreaCachInsertCache[key]
	episodeAreaCachInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			episodeAreaCachAllColumns,
			episodeAreaCachColumnsWithDefault,
			episodeAreaCachColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(episodeAreaCachType, episodeAreaCachMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(episodeAreaCachType, episodeAreaCachMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"episode_area_caches\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"episode_area_caches\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into episode_area_caches")
	}

	if !cached {
		episodeAreaCachInsertCacheMut.Lock()
		episodeAreaCachInsertCache[key] = cache
		episodeAreaCachInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EpisodeAreaCach.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EpisodeAreaCach) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	episodeAreaCachUpdateCacheMut.RLock()
	cache, cached := episodeAreaCachUpdateCache[key]
	episodeAreaCachUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			episodeAreaCachAllColumns,
			episodeAreaCachPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update episode_area_caches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"episode_area_caches\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, episodeAreaCachPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(episodeAreaCachType, episodeAreaCachMapping, append(wl, episodeAreaCachPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update episode_area_caches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for episode_area_caches")
	}

	if !cached {
		episodeAreaCachUpdateCacheMut.Lock()
		episodeAreaCachUpdateCache[key] = cache
		episodeAreaCachUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q episodeAreaCachQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for episode_area_caches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for episode_area_caches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EpisodeAreaCachSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), episodeAreaCachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"episode_area_caches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, episodeAreaCachPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in episodeAreaCach slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all episodeAreaCach")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EpisodeAreaCach) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no episode_area_caches provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(episodeAreaCachColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	episodeAreaCachUpsertCacheMut.RLock()
	cache, cached := episodeAreaCachUpsertCache[key]
	episodeAreaCachUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			episodeAreaCachAllColumns,
			episodeAreaCachColumnsWithDefault,
			episodeAreaCachColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			episodeAreaCachAllColumns,
			episodeAreaCachPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert episode_area_caches, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(episodeAreaCachPrimaryKeyColumns))
			copy(conflict, episodeAreaCachPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"episode_area_caches\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(episodeAreaCachType, episodeAreaCachMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(episodeAreaCachType, episodeAreaCachMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert episode_area_caches")
	}

	if !cached {
		episodeAreaCachUpsertCacheMut.Lock()
		episodeAreaCachUpsertCache[key] = cache
		episodeAreaCachUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EpisodeAreaCach record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EpisodeAreaCach) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EpisodeAreaCach provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), episodeAreaCachPrimaryKeyMapping)
	sql := "DELETE FROM \"episode_area_caches\" WHERE \"episode_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from episode_area_caches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for episode_area_caches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q episodeAreaCachQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no episodeAreaCachQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from episode_area_caches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for episode_area_caches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EpisodeAreaCachSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(episodeAreaCachBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), episodeAreaCachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"episode_area_caches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, episodeAreaCachPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from episodeAreaCach slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for episode_area_caches")
	}

	if len(episodeAreaCachAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EpisodeAreaCach) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEpisodeAreaCach(ctx, exec, o.EpisodeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EpisodeAreaCachSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EpisodeAreaCachSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), episodeAreaCachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"episode_area_caches\".* FROM \"episode_area_caches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, episodeAreaCachPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EpisodeAreaCachSlice")
	}

	*o = slice

	return nil
}

// EpisodeAreaCachExists checks if the EpisodeAreaCach row exists.
func EpisodeAreaCachExists(ctx context.Context, exec boil.ContextExecutor, episodeID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"episode_area_caches\" where \"episode_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, episodeID)
	}
	row := exec.QueryRowContext(ctx, sql, episodeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if episode_area_caches exists")
	}

	return exists, nil
}

// Exists checks if the EpisodeAreaCach row exists.
func (o *EpisodeAreaCach) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EpisodeAreaCachExists(ctx, exec, o.EpisodeID)
}
